{"version":3,"sources":["components/GameBoard/GameCell/GameCell.js","components/GameBoard/GameBoard.js","components/App.js","index.js"],"names":["GameCell","_ref","isOn","flipCells","cellStyle","concat","react_default","a","createElement","className","onClick","GameBoard","state","isWinner","board","_this","createBoard","renderGame","_this$props","props","nColumns","nRows","y","row","_loop","x","coordinates","push","GameBoard_GameCell_GameCell","key","handleFlipCells","_this$props2","_coordinates$split$ma","split","map","Number","_coordinates$split$ma2","Object","slicedToArray","flipCell","every","cell","setState","handleRestartGame","this","Math","random","chanceLightStartsOn","Fragment","React","Component","defaultProps","App","components_GameBoard_GameBoard","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.5b401385.chunk.js","sourcesContent":["import React from 'react';\r\nimport './GameCell.scss'\r\n\r\nconst GameCell = ({isOn, flipCells}) => {\r\n  const handleClick = () => flipCells();\r\n\r\n  let cellStyle = `GameCell ${isOn ? \"Cell-On\" : \"\"}`;\r\n  return (\r\n    <td className={cellStyle} onClick={handleClick} />\r\n  )\r\n};\r\n\r\nexport default GameCell;\r\n","import React from 'react';\r\nimport './GameBoard.scss'\r\n\r\nimport GameCell from './GameCell/GameCell';\r\n\r\nclass GameBoard extends React.Component {\r\n  static defaultProps = { nColumns: 5, nRows: 5, chanceLightStartsOn: 0.25};\r\n  state = { isWinner: false, board: this.createBoard() };\r\n\r\n  createBoard() {\r\n    let board = [];\r\n    for(let y = 0; y < this.props.nRows; y++) {\r\n      let row = [];\r\n      for(let x = 0; x < this.props.nColumns; x++) {\r\n        // Math.random() gives a random between 0 and 1, we compare it with the percentage of ON lights coming from props/defaultProps\r\n        row.push(Math.random() < this.props.chanceLightStartsOn);\r\n      }\r\n      board.push(row);\r\n    }\r\n    return board;\r\n  }\r\n\r\n  renderGame = () => {\r\n    const { nColumns, nRows } = this.props;\r\n    let board = [];\r\n\r\n    for(let y = 0; y < nRows; y++) {\r\n      let row = [];\r\n      for(let x = 0; x < nColumns; x++) {\r\n        const coordinates = `${y}-${x}`;\r\n        row.push(<GameCell key={coordinates} isOn={this.state.board[y][x]} flipCells={() => this.handleFlipCells(coordinates)}/>)\r\n      }\r\n      board.push(<tr key={y}>{row}</tr>);\r\n    }\r\n\r\n    return (\r\n      <table className=\"Board\">\r\n        <tbody>{board}</tbody>\r\n      </table>\r\n    )\r\n  }\r\n\r\n  handleFlipCells = coordinates => {\r\n    const {nColumns, nRows} = this.props;\r\n    const board = this.state.board;\r\n    const [y, x] = coordinates.split(\"-\").map(Number);\r\n\r\n    function flipCell(y, x) {\r\n      // if this coordinate is actually on board, flip it\r\n      if (x >= 0 && x < nColumns && y >= 0 && y < nRows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    }\r\n    // flip this cell and the cells around it\r\n    flipCell(y, x);\r\n    flipCell(y - 1 , x);\r\n    flipCell(y + 1 , x);\r\n    flipCell(y, x - 1);\r\n    flipCell(y, x + 1);\r\n\r\n    const isWinner = board.every(row => row.every(cell => !cell));\r\n    this.setState({board, isWinner});\r\n  }\r\n\r\n  handleRestartGame = () => {\r\n    this.setState({ isWinner: false, board: this.createBoard() });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"GameBoard\">\r\n        {this.state.isWinner ?\r\n          <>\r\n            <span className=\"neon-orange winner\">You</span>\r\n            <span className=\"neon-blue winner\">Win</span>\r\n          </>\r\n        :\r\n        <div>\r\n          <span className=\"neon-orange\">Lights</span>\r\n          <span className=\"neon-blue\">Out</span>\r\n          {this.renderGame()}\r\n        </div>\r\n      }\r\n      <button className=\"restart-button\" onClick={this.handleRestartGame}>Restart</button>\r\n    </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\r\nimport GameBoard from './GameBoard/GameBoard';\r\n\r\nconst App = () => {\r\n  return <GameBoard />\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}